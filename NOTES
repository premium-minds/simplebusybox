June 19, 2016.

The goal here is to make a simple and free build of BusyBox for Android
that does not require root.  It will package the binaries within the
app-lib directory, so that all you have to do is add it to $PATH.

It seems popular to add dropbear ssh client to packages such as this one,
but to me that seems like a slippery slope...why add that and not rsync,
for example?  I intend to limit to just busybox.

...

So, here's roughly how the files in jni/ were manually built.  I started
with configs/android_ndk_defconfig, and customized that a bit, and had
that in .config in a regular PC host build.  Then I run "make", and it
generates the auto-generated .h files, and then I run:

   cp include/applet_tables.h include/applets.h include/autoconf.h \
   include/usage.h include/usage_compressed.h include/NUM_APPLETS.h \
   ~/src/simplebusybox/jni/; cp .config ~/src/simplebusybox/jni/config

So that's where those files came from...

...

Switched to using android-ndk-r10d instead of android-ndk-r8 because even
at android-8 (froyo) it has a few more functions...


June 20, 2016.

Had to update to android-9 (gingerbread 2.3) because a bunch of things
needed sysinfo().  Last time I built busybox, I just disabled those
things (like free(1)).  But it would be nice to have them.  And
gingerbread happens to be a good benchmark for very old, anyways.  Any
newer and we might as well jump straight to 4.x, because honeywhatever
never saw much deployment.


July 3, 2016.

I managed to build busybox, and now it is time to package it up.  I
thought I would be able to hack ant to include the "busybox" binary and
symlinks into the apk file, so that it would show up in something like
/data/app/org.galexander.busybox/lib/arm/ and I could just add that to my
PATH.  This would avoid the hack I used in simplesshd where I renamed the
sshd to libsshd.so so that apkbuilder would find it.  That would not
suffice because we can't very well have the user typing "libless.so"
instead of "less".

But it is not ant - ant just runs apkbuilder.  apkbuilder is some mess of
java.  apkbuilder sucks.  I'm not about to hack the java of apkbuilder.
And I'm not super inclined to dodge it and use infozip directly to create
my apk.

How did Burrows Busybox do it?  Well, first off, the PATH is:

   /data/data/burrows.apps.busybox/app_busybox

And second off, unpacking the APK doesn't seem to reveal the busybox.  So
presumably it fetches it from somewhere and then extracts it into its
data directory, and I guess that it is legit to chmod your own data
directory to be world-readable?

So I propose packaging it as a raw resource, and then having the Activity
unpack it.

...

And that works!  I can even use busybox --install -s to make the symlinks!
Nice!

Now I just need to make some UI up and then I'm set!

XXX - get rid of busybox commands: reboot, poweroff, halt
